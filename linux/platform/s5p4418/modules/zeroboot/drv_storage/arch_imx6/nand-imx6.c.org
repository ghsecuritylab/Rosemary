/*-----------------------------------------------------------------------------
  파 일 : nand-s5pv210.c
  설 명 : 
  작 성 : frog@falinux.com
          freefrug@falinux.com
  날 짜 : 2011-07-29
  주 의 :
		  512M SLC 난드 전용이다.
-------------------------------------------------------------------------------*/
#ifndef __KERNEL__
#define __KERNEL__
#endif

#ifndef MODULE
#define MODULE
#endif


#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/version.h>
#include <linux/init.h>
#include <linux/fs.h>
#include <linux/sched.h> 
#include <linux/interrupt.h>
#include <linux/wait.h>
#include <linux/ioport.h>
#include <linux/slab.h>     // kmalloc() 
#include <linux/poll.h>     
#include <linux/proc_fs.h>
#include <linux/workqueue.h>
#include <linux/irq.h>		
#include <linux/time.h>			
#include <linux/timer.h>		
#include <linux/clk.h>
#include <asm/system.h>     
#include <asm/uaccess.h>
#include <asm/ioctl.h>
#include <asm/unistd.h>
#include <asm/io.h>
#include <asm/irq.h>

#include <zb_blk.h>
#include <zbi.h>
#include <zb_nand.h>

#define STORAGE_NAME			"s5pv210"
#define NAND_PROTECT			0			// never write
#define USE_HWECC				1			// hwecc1

#define NAND_PHYS_BASE			(0xB0E00000)
#define NAND_PHYS_SIZE			(0x2000)

#define OFS_NFCONF  			(0x00)	// R/W Configuration register								0xX000_100X 		
#define OFS_NFCONT 				(0x04)	// R/W Control register                          			0x0001_00C6 
#define OFS_NFCMD            	(0x08)	// R/W Command register                          			0x0000_0000 
#define OFS_NFADDR            	(0x0c)	// R/W Address register                          			0x0000_0000 
#define OFS_NFDATA8            	(0x10)	// R/W Data register                             			0xXXXX_XXXX 
#define OFS_NFMECCD0           	(0x14)	// R/W 1st and 2nd Main ECC Data Register                   0x0000_0000 
#define OFS_NFMECCD1           	(0x18)	// R/W 3rd and 4th Main ECC Data Register					0x0000_0000 
#define OFS_NFSTAT            	(0x28)	// R/W status registet                      				0x0080_001D 
#define OFS_NFECCERR0          	(0x2C)	// R ECC Error Status0 Register 							0x0003_FFF2 
#define OFS_NFMECC0				(0x34)	// ECC0

#define REG_NFCONF  			(*(volatile u32 *)(nand_base + OFS_NFCONF	))
#define REG_NFCONT 				(*(volatile u32 *)(nand_base + OFS_NFCONT	))
#define REG_NFCMD            	(*(volatile u8  *)(nand_base + OFS_NFCMD    ))
#define REG_NFADDR            	(*(volatile u8  *)(nand_base + OFS_NFADDR   ))
#define REG_NFDATA8            	(*(volatile u8  *)(nand_base + OFS_NFDATA8  ))
#define REG_NFSTAT            	(*(volatile u32 *)(nand_base + OFS_NFSTAT   ))
#define REG_NFMECC0           	(*(volatile u32 *)(nand_base + OFS_NFMECC0  ))
#define REG_NFMECCD0 			(*(volatile u32 *)(nand_base + OFS_NFMECCD0 ))	
#define REG_NFMECCD1 			(*(volatile u32 *)(nand_base + OFS_NFMECCD1 ))	
#define REG_NFECCERR0 			(*(volatile u32 *)(nand_base + OFS_NFECCERR0))	

#define NAND_DISABLE_CE()		(REG_NFCONT |= (1 << 1))
#define NAND_ENABLE_CE()		(REG_NFCONT &= ~(1 << 1))

#define NF_TRANSRnB()			do { while(!(REG_NFSTAT & (1 << 0))); } while(0)	

#define S3C_NFCONF_ECC_1BIT		(0<<23)
#define S3C_NFCONT_INITMECC		(1<<5)
#define S3C_NFCONT_MECCLOCK		(1<<7)
                            	
#define NAND_CMD_READ0			0x00
#define NAND_CMD_RNDOUT         0x05
#define NAND_CMD_READSTART		0x30
#define NAND_CMD_RNDOUTSTART	0xE0
#define NAND_CMD_READID			0x90
#define NAND_CMD_ERASE1     	0x60
#define NAND_CMD_ERASE2     	0xd0
#define NAND_CMD_SEQIN      	0x80
#define NAND_CMD_PAGEPROG   	0x10

#define ECC_READ				0
#define ECC_WRITE				1

/// @{
/// @brief  변수정의
///-----------------------------------------------------------------------------
static void __iomem *nand_base = NULL; 	
static void __iomem *dma_base  = NULL;
static u32  nand_page_size  =  (      2048); 	
static u32  nand_block_size =  (128 * 1024); 	
static u32  page_in_block   =  (128 * 1024)/(2048);
static u32  page_min  = 0; 
static u32  page_max  = 0;

/// @}

static struct zb_priv_nand *zb_nand;
//struct zblk_ops cops;


static inline void delay(unsigned long loops)
{
	__asm__ volatile ("1:\n" "subs %0, %1, #1\n"
		"bne 1b" : "=r" (loops) : "0"(loops));
}

/*
 * zb_bbt  : bbt array 8bit size, how many bad block have before
 *         : PAGE_OFFSET + 0x0008E000
 *         : PAGE_OFFSET + 0x0008F000
 *         : 8192 MAX
 * caution : bug - if bad block count is greater than 256, will go 0
 *         : bug - if nand storage size is over block_size * 8192
 *                 128KiB block is 1GiB Max
 */
unsigned char *zb_bbt;
#define	BBT_MAX		255

/*
 * same source is in drv_storage/arch_xxx/nand-xxxx.c
 * save source is in drv_storage/arch_xxx/nalcode_storage_xxx.c
 * bbt table is per block
 * index is 4K unit
 * get block number by index
 * multiply block per index
 */
int get_bbt_skip_count(int index)
{
	int count;

	count = zb_bbt[index >> ZB_NAND_BLOCK_INDEX_SHIFT];
	return count * ZB_NAND_INDEX_PER_BLOCK;
}
/*-----------------------------	-------------------------------------------------
  @brief   4K 단위의 번호를 페이지 주소로 변환해 준다
  @remark  
*///----------------------------------------------------------------------------
static unsigned int mem_index_to_nand_phys(unsigned int mem_page)
{
	unsigned int offset_nand_page;

	offset_nand_page = mem_page * (PAGE_SIZE/nand_page_size);
//printk( "-----%s(%d) offset_nand_page=%d  ZB_NAND_START_PAGE=%d\n", __func__,__LINE__, offset_nand_page, ZB_NAND_START_PAGE );
	return ZB_NAND_START_PAGE + offset_nand_page;
}

/*------------------------------------------------------------------------------
  @brief   페이지 주소를 4K 단위의 번호로 변환해 준다
  @remark  
*///----------------------------------------------------------------------------
static unsigned int nand_phys_to_idx(unsigned int phys)
{
	unsigned int unit;

	unit = ( PAGE_SIZE/nand_page_size );
	return ( (phys - ZB_NAND_START_PAGE) / unit );
	//return ( (phys - nand_base_addr/nand_page_size) / unit );
}

/*------------------------------------------------------------------------------
  @brief   NAND 디텍션을 지원한다. 
  @remark  
*///----------------------------------------------------------------------------
static int nand_detect( void )
{
	u8 	company_id;
	u8 	device_id;

	printk( "nand detect hwecc=%d\n", USE_HWECC );

    NAND_ENABLE_CE();

    	REG_NFCMD = NAND_CMD_READID;
    	REG_NFADDR =  0x00;

       	delay(2000);

		company_id = REG_NFDATA8;
		device_id  = REG_NFDATA8;

	NAND_DISABLE_CE();

	printk( "company_id = %02X\n", company_id );
	printk( "device_id  = %02X\n", device_id );

	if( (company_id == 0xEC) && (device_id == 0xDC)) 
	{
		nand_page_size  =  (      2048); 	
		nand_block_size =  (128 * 1024); 	
		return 0;
	}	

	return 1;
}
/*------------------------------------------------------------------------------
  @brief   NAND 배드 블록을 체크한다.
  @return  배드블럭 이면 -1
           정상이면  0  
*///----------------------------------------------------------------------------
static int nand_is_bad_block( u32 block_start_page )
{
	char    oob[16];
	int		retry = 3, lp;

	while( 0 < retry-- )
	{
		NAND_ENABLE_CE();
    	
    	REG_NFCMD = NAND_CMD_READ0;
    	
    	REG_NFADDR = nand_page_size & 0xff;
		REG_NFADDR =(nand_page_size >> 8) & 0xff;
    	
		REG_NFADDR = (block_start_page) & 0xff;
		REG_NFADDR = (block_start_page >> 8) & 0xff;
		REG_NFADDR = (block_start_page >> 16) & 0xff;
    	
		delay(2000);
		REG_NFCMD = NAND_CMD_READSTART;

		delay(10000);
    	NF_TRANSRnB();
    	
		for( lp=0; lp < 2; lp++)
		{
    		oob[lp] = REG_NFDATA8;
    	}
    	
    	NAND_DISABLE_CE();
		
		if ( oob[0] == 0xff && oob[1] == 0xff ) return 0;
		if ( oob[0] == 0x00 && oob[1] == 0x00 ) return -1;
		
		// 왜지??
		if ( 0 == retry ) printk( "bad oob %02x %02x\n", oob[0], oob[1] );
		delay(20000);
	}
		
	return -1;	
}
/*------------------------------------------------------------------------------
  @brief   페이지가 배드블럭인지 확인한다.
  @param   mem_page  4K 메모리 페이지 인덱스
  @return  배드페이지 이면 -1
           정상이면  0  
*///----------------------------------------------------------------------------
//static int nand_is_vaild_4k( u32 mem_page )
//{
//	u32  page;
//
//	page = mem_index_to_nand_phys(mem_page);
//	
//	// 블럭단위로 페이지 주소를 정렬
//	if ( ( page < page_min ) || ( page > page_max ) )
//	{
//		printk( "..nand-valid fatal error invalid-page=%d (%d <= page <= %d)\n", page, page_min, page_max );	
//		return -1;
//	}
//	
//	if ( 0 == nand_is_bad_block( page ) ) return ZB_PAGE_VALID;
//	
//	printk( "bad page=%d\n", page );
//	return ZB_PAGE_INVALID;
//}

/*------------------------------------------------------------------------------
  @brief   NAND 지우기를 지원한다. 
  @remark  
*///----------------------------------------------------------------------------
static int nand_erase( u32 block_start_page )
{
	if ( ( block_start_page < page_min ) || ( block_start_page > page_max  ) )
	{
		printk( "..nand-erase fatal error invalid-page=%d (%d <= page <= %d)\n", block_start_page, page_min, page_max );	
		return -1;
	}

#if NAND_PROTECT	
	printk( "..erase nand page=%d\n", block_start_page );	
	return nand_block_size;
	
#else

	NAND_ENABLE_CE();

    REG_NFCMD = NAND_CMD_ERASE1;

	REG_NFADDR = (block_start_page) & 0xff;
	REG_NFADDR = (block_start_page >> 8) & 0xff;
	REG_NFADDR = (block_start_page >> 16) & 0xff;

	delay( 2000 );

	REG_NFCMD = NAND_CMD_ERASE2;

	NF_TRANSRnB();

    NAND_DISABLE_CE();

	return nand_block_size;
#endif
}

#if USE_HWECC
/*------------------------------------------------------------------------------
  @brief   NAND ecc enable  (write)
  @remark  
*///----------------------------------------------------------------------------
static void nand_enable_hwecc1( int is_write )
{
	u32  nfconf, nfcont;

	nfconf  = REG_NFCONF;
	nfconf &= ~(0x3 << 23);
	nfconf |= S3C_NFCONF_ECC_1BIT;
	REG_NFCONF = nfconf;

	// Init main ECC & unlock 
	nfcont  = REG_NFCONT;
	nfcont |= S3C_NFCONT_INITMECC;		
	nfcont &= ~S3C_NFCONT_MECCLOCK;
	REG_NFCONT = nfcont;
}
/*------------------------------------------------------------------------------
  @brief   NAND ecc calculae
  @remark  
*///----------------------------------------------------------------------------
static void nand_calculate_ecc1( u8 *ecc_code )
{
	u32 nfcont, nfmecc0;

	// Lock
	nfcont = REG_NFCONT;
	nfcont |= S3C_NFCONT_MECCLOCK;
	REG_NFCONT = nfcont;

	nfmecc0 = REG_NFMECC0;

	ecc_code[0] =  nfmecc0        & 0xff;
	ecc_code[1] = (nfmecc0 >> 8 ) & 0xff;
	ecc_code[2] = (nfmecc0 >> 16) & 0xff;
	ecc_code[3] = (nfmecc0 >> 24) & 0xff;
}
/*------------------------------------------------------------------------------
  @brief   NAND 쓰기를 지원한다.  with ECC
  @remark  
*///----------------------------------------------------------------------------
static u8 eccpos[] = {40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55};
static u8 oob_buf[128] = { 0, }; 
static int nand_write_page( u32 page , u8 *buf )
{
	s32 	lp;

	if ( ( page < page_min ) || ( page > page_max ) )
	{
		printk( "..nand-write fatal error invalid-page=%d (%d <= page <= %d)\n", page, page_min, page_max );	
		return -1;
	}
	
#if NAND_PROTECT	
	printk( "..write nand page=%d\n", page );	
	return nand_page_size;

#else	
	NAND_ENABLE_CE();

    REG_NFCMD = NAND_CMD_SEQIN;

    REG_NFADDR = 0;
	REG_NFADDR = 0;

	REG_NFADDR = (page) & 0xff;
	REG_NFADDR = (page >> 8) & 0xff;
	REG_NFADDR = (page >> 16) & 0xff;

	delay( 2000 );

	do //----------------------------------------------------
	{
		int  i, eccsize  = 512;
		int  eccbytes    = 4;
		int  eccsteps    = nand_page_size/512; 
		int  ecc_total, oob_wrsize;
		u8   ecc_calc[128];
		u8  *pd, *po;

		pd = buf;
		ecc_total  = eccbytes * eccsteps;
		oob_wrsize = nand_page_size/32;

		// main area
		for (i = 0; eccsteps; eccsteps--, i += eccbytes ) 
		{
			nand_enable_hwecc1( ECC_WRITE );
			
			for( lp=0; lp < eccsize; lp++)
			{
				REG_NFDATA8 = *pd++;
    		}
    	
			nand_calculate_ecc1( &ecc_calc[i] );
		}

		// oob area
		{
			if ( 0xff != oob_buf[0] ) memset( oob_buf, 0xff, sizeof(oob_buf) );
			
			// oob 정렬
			for (i = 0; i < ecc_total; i++)
				oob_buf[ eccpos[i] ] = ecc_calc[i];
			
			po = oob_buf;
			for( lp=0; lp < oob_wrsize; lp++ )
			{
				REG_NFDATA8 = *po++;
   			}
   		}

	} while (0); //------------------------------------------
	
	REG_NFCMD = NAND_CMD_PAGEPROG;

    NF_TRANSRnB();

    NAND_DISABLE_CE();
	
	return nand_page_size;	
#endif
}
/*------------------------------------------------------------------------------
  @brief   NAND ecc correct
  @remark  
*///----------------------------------------------------------------------------
static int nand_correct_ecc1( u8 *dat, u8 *read_ecc )
{
	u32 nfestat0, err_type, nfmeccdata0, nfmeccdata1;

	nfmeccdata0 = (read_ecc[1] << 16) | read_ecc[0];
	nfmeccdata1 = (read_ecc[3] << 16) | read_ecc[2];
		
	REG_NFMECCD0 = nfmeccdata0;
	REG_NFMECCD1 = nfmeccdata1;

	// Read ECC status 
	nfestat0 = REG_NFECCERR0;
	err_type = nfestat0 & 0x3;

	if ( err_type == 0 ) return 0; 

	if ( err_type == 1 )
	{
		dat[(nfestat0 >> 7) & 0x7ff] ^= (1 << ((nfestat0 >> 4) & 0x7));
		printk( " ecc1 correct OK\n");
		return 1;
	}

	printk( " ecc1 correct FAIL\n");
	return -1;
}
/*------------------------------------------------------------------------------
  @brief   NAND 읽기를 지원한다.   with ECC
  @remark  
*///----------------------------------------------------------------------------
#define ECC_SIZE 	512
#define ECC_BYTES 	4
#define ECC_STEPS	(nand_page_size/ECC_SIZE)

static int nand_read_page( u32 page, u8 *buf )
{
	s32 	lp;

	NAND_ENABLE_CE();

    REG_NFCMD = NAND_CMD_READ0;

    REG_NFADDR = eccpos[0];				// col#0
	REG_NFADDR = (nand_page_size>>8);	// col#1

	REG_NFADDR = (page) & 0xff;			// row#0
	REG_NFADDR = (page >> 8) & 0xff;
	REG_NFADDR = (page >> 16) & 0xff;

	delay( 2000 );

	REG_NFCMD = NAND_CMD_READSTART;
    NF_TRANSRnB();

	do //----------------------------------------------------
	{
		int  i, col; 
		int  eccsteps;
		u8   oob_buf[128]; 
		u8  *p = buf;
        
        // read oob
		for( lp=0; lp < ECC_BYTES*ECC_STEPS; lp++)
		{
    		oob_buf[lp] = REG_NFDATA8;
    	}		
		
		// main area
		for ( col=0, i=0, eccsteps=ECC_STEPS; eccsteps;  eccsteps--, i += ECC_BYTES, col+=ECC_SIZE ) 
		{
			nand_enable_hwecc1( ECC_READ );

			REG_NFCMD  = NAND_CMD_RNDOUT;
			REG_NFADDR = col & 0xff;	// col #1
			REG_NFADDR = col >> 8;		// col #2
			REG_NFCMD  = NAND_CMD_RNDOUTSTART;
			
			for( lp=0; lp < ECC_SIZE; lp++)
			{
				p[lp] = REG_NFDATA8;
    		}

			// correct data	
			nand_correct_ecc1( p, &oob_buf[i] );
			p += ECC_SIZE;
		}

	} while (0); //------------------------------------------


    NAND_DISABLE_CE();
	
	return nand_page_size;	
}

#else // end USE_HWECC

/*------------------------------------------------------------------------------
  @brief   NAND 쓰기를 지원한다.  without ECC
  @remark  
*///----------------------------------------------------------------------------
static int nand_write_page( u32 page , u8 *buf )
{
	s32 	lp;

	if ( ( page < page_min ) || ( page > page_max ) )
	{
		printk( "..nand-write fatal error invalid-page=%d (%d <= page <= %d)\n", page, page_min, page_max );	
		return -1;
	}
	
#if NAND_PROTECT	
	printk( "..write nand page=%d\n", page );	
	return nand_page_size;

#else	
	NAND_ENABLE_CE();

    REG_NFCMD = NAND_CMD_SEQIN;

    REG_NFADDR = 0;
	REG_NFADDR = 0;

	REG_NFADDR = (page) & 0xff;
	REG_NFADDR = (page >> 8) & 0xff;
	REG_NFADDR = (page >> 16) & 0xff;

	delay( 2000 );

	for( lp=0; lp < nand_page_size; lp++)
	{
		REG_NFDATA8 = *buf++;
    }

	REG_NFCMD = NAND_CMD_PAGEPROG;

    NF_TRANSRnB();

    NAND_DISABLE_CE();
	
	return nand_page_size;	
#endif
}

/*------------------------------------------------------------------------------
  @brief   NAND 읽기를 지원한다.  without ECC
  @remark  
*///----------------------------------------------------------------------------
static int nand_read_page( u32 page , u8 *buf )
{
	s32 	lp;

	NAND_ENABLE_CE();

    REG_NFCMD = NAND_CMD_READ0;

    REG_NFADDR = 0;
	REG_NFADDR = 0;

	REG_NFADDR = (page) & 0xff;
	REG_NFADDR = (page >> 8) & 0xff;
	REG_NFADDR = (page >> 16) & 0xff;

	delay( 2000 );

	REG_NFCMD = NAND_CMD_READSTART;

    NF_TRANSRnB();

	for( lp=0; lp < nand_page_size; lp++)
	{
    	*buf++ = REG_NFDATA8;
    }

    NAND_DISABLE_CE();
	
	return nand_page_size;	
}

#endif // not USE_HWECC


/*------------------------------------------------------------------------------
  @brief   ZERO 부트를 위하여 할당된 파티션 영역을 모두 지운다.
  @remark  
*///----------------------------------------------------------------------------
static int nand_all_erase( void )
{
	int page_lp;
	int page_count;
	int page_step;

	printk( "NAND FLASH all erase....\n" );
	page_count	= ZB_STORAGE_SIZE/nand_page_size;
	page_step	= nand_block_size/nand_page_size;
	
	printk( "> erase count = %d [", page_count );
	
	for( page_lp=0; page_lp < page_count; page_lp += page_step )
	{
		nand_erase( page_lp+ZB_NAND_START_PAGE );
		if( ( page_lp % 10240 ) == 0 ) printk( "." );		
	}	
	printk( "]\n" );
	return 0;
}


/*------------------------------------------------------------------------------
  @brief   시작하기 전에 필요한 일을 한다.
  @remark  사용할 플래시를 모두 지운다.
*///----------------------------------------------------------------------------
static int nand_setup_first( void )
{
	u32  page;

	// 영역 지우기
	for( page=page_min; page<page_max; page+=page_in_block )
	{
		nand_erase( page );
	}	
	return 0;
	//return nand_all_erase();
}
/*------------------------------------------------------------------------------
  @brief   메모리 4K 페이지 단위로 쓴다.
  @remark  
*///----------------------------------------------------------------------------
static int nand_write_page_4k( u32 mem_page,  u8 *page_buf )
{
	u32 lp;
	u32 count;
	u32 page_index;
	u8	*data;
	
	mem_page	+= get_bbt_skip_count(mem_page);
	page_index 	= mem_index_to_nand_phys(mem_page);
	data		= page_buf;

	count		= PAGE_SIZE/nand_page_size;
	
	for( lp = 0; lp < count; lp++ )
	{
		nand_write_page( page_index, data );

		// test
		//{
		//	u8  cmp[2048];
		//	nand_read_page( page_index, cmp );
		//	if ( 0 != memcmp( data, cmp, 2048 ) )
		//	{
		//		printk( "memcmp error .....!\n" );	
		//	}
		//}		
		
		page_index++;
		data += nand_page_size;
	}	
	
	return 0;
}

/*------------------------------------------------------------------------------
  @brief   메모리 4K 페이지 단위로 읽는다.
  @remark  
*///----------------------------------------------------------------------------
static int nand_read_page_4k( u32 mem_page,  u8 *page_buf )
{
	u32 lp;
	u32 count;
	u32 page_index;
	u8	*data;
	
	mem_page	+= get_bbt_skip_count(mem_page);
	page_index 	= mem_index_to_nand_phys(mem_page);;
	data		= page_buf;
	count		= PAGE_SIZE/nand_page_size;
	
	for( lp = 0; lp < count; lp++ )
	{
		nand_read_page( page_index, data );
		page_index++;
		data += nand_page_size;
	}	
	return 0;
}

/*------------------------------------------------------------------------------
  @brief   저장소의 offset 값을 알려준다
  @remark  
*///----------------------------------------------------------------------------
static u32 nand_get_storage_offset( void )
{
	return zb_nand->offset; // ZB_STORAGE_OFFSET;
}
/*------------------------------------------------------------------------------
  @brief   디바이스 제어를 위한 가상주소
  @remark  
*///----------------------------------------------------------------------------
static u32 nand_get_io_vaddr(void)
{
	return (u32)nand_base;
}

/*==============================================================================
  @brief   for NAND private ptr  (ver 1.4.0)
*///----------------------------------------------------------------------------
static int nand_get_shift(int base)
{
	int shift = 0;

	while (base) {
		base = base >> 1;
		if (!base) break;
		shift++;
	}
	return shift;
}

#include <linux/mtd/mtd.h>
extern struct mtd_info *get_mtd_device_nm(const char *name);
extern uint64_t zero_get_mtd_part(struct mtd_info *mtd);
static int zb_setup_private_info(void)
{
	struct mtd_info *zmtd;

	memset(zb_nand, 0, sizeof(struct zb_priv_nand));

	zb_nand->vaddr_nand_ctrl = (u32)nand_base;
	zb_nand->vaddr_dma_ctrl  = (u32)dma_base;

//#ifdef ARG_ZB_STORAGE_OFFSET	// 외부에서 저장소를 정의했다면
//	zmtd = NULL;
//	{
//		zb_nand->offset          = ZB_STORAGE_OFFSET;
//		zb_nand->size            = ZB_STORAGE_SIZE;
//		zb_nand->erasesize       = nand_block_size;
//		zb_nand->pagesize        = nand_page_size;
//		zb_nand->zb_start_page   = ZB_NAND_START_PAGE;
//		zb_nand->page_per_4k     = PAGE_SIZE/zb_nand->pagesize;
//		zb_nand->page_per_block  = zb_nand->erasesize/zb_nand->pagesize;
//		zb_nand->index_per_block = zb_nand->erasesize/PAGE_SIZE;
//		zb_nand->block_index_shtft = nand_get_shift(zb_nand->index_per_block);
//		zb_nand->zb_page_count   = zb_nand->size/zb_nand->pagesize;
//	}
//#else							// 커널의 mtd 에서 직접 읽어온다.
	zmtd = get_mtd_device_nm("snapshot");
	if ( zmtd )
	{
		printk("\t*find snapshot partition\n" );
		zb_nand->offset            = zero_get_mtd_part(zmtd);
		zb_nand->size              = zmtd->size;
		zb_nand->erasesize         = zmtd->erasesize;
		zb_nand->pagesize          = zmtd->writesize;
		zb_nand->zb_start_page     = zb_nand->offset/zb_nand->pagesize;
		zb_nand->page_per_4k       = PAGE_SIZE/zb_nand->pagesize;
		zb_nand->page_per_block    = zb_nand->erasesize/zb_nand->pagesize;
		zb_nand->index_per_block   = zb_nand->erasesize/PAGE_SIZE;
		zb_nand->block_index_shtft = nand_get_shift(zb_nand->index_per_block);
		zb_nand->block_page_shtft  = nand_get_shift(zb_nand->page_per_block);
		zb_nand->zb_page_count     = zb_nand->size/zb_nand->pagesize;
	}
	else
	{
		printk( "============fatal error can't find 'snapshot' patition ==============\n" );
	}
//#endif
	
	printk("\toffset            0x%08lX\n", zb_nand->offset);
	printk("\ttotal size        0x%08X\n",  zb_nand->size);
	printk("\terasesize         0x%08X\n",  zb_nand->erasesize);
	printk("\tpagesize          0x%08X\n",  zb_nand->pagesize);
	printk("\tstart page        0x%08X\n",  zb_nand->zb_start_page);
	printk("\tcount page        0x%08X\n",  zb_nand->zb_page_count);
	printk("\tpage_per_4k       0x%08X\n",  zb_nand->page_per_4k);
	printk("\tpage_per_block    0x%08X\n",  zb_nand->page_per_block);
	printk("\tindex_per_block   0x%08X\n",  zb_nand->index_per_block);
	printk("\tblock index shtft 0x%08X\n",  zb_nand->block_index_shtft);
	printk("\tblock page shtft  0x%08X\n",  zb_nand->block_page_shtft);

	return 0;
}

/* bad check function is page unit.
 * we need only block unit check.
 * block_base : base page number
 * block_max  : max page number
 */
static int zb_bbt_init(void)
{
	int index, page, page_end;
	int bad_cnt;

	zb_bbt = (unsigned char *)BBT_ADDR;
	memset(zb_bbt, 0x00, BBT_ARRAY_CNT);

	bad_cnt  = 0;
	index    = 0;  
	page     = zb_nand->zb_start_page;
	page_end = zb_nand->zb_start_page + zb_nand->zb_page_count;
	printk( "start=%d  end=%d  page_per_block=%d\n", page, page_end, zb_nand->page_per_block );
	
	for ( ; page<page_end; page+=zb_nand->page_per_block ) 
	{
		//printk("---page=%d  offset=0x%08x\n", page, page*zb_nand->pagesize );
		if ( nand_is_bad_block( page ) < 0 )
		{
			int i, curblock;

			printk("bad page=%d offset=0x%08x\n", page, page*zb_nand->pagesize );
			curblock = (page - zb_nand->zb_start_page) / zb_nand->page_per_block;
			for (i = curblock - bad_cnt; i < curblock; i++) {
				zb_bbt[i] = bad_cnt + 1;
			}
			bad_cnt++;
		}
		
		zb_bbt[index++] = bad_cnt;
	}

	if (bad_cnt > BBT_MAX) {
		printk("BUG bad block count is too high\n");
		printk("bad block algorithm can not working\n");
		printk("bad block is  %d\n", bad_cnt);
		printk("bad block max %d\n", BBT_MAX);
		panic("Snapshot BBT count is Too Big");
		while(1);
	}

	printk("\tnand bad total       %d\n", bad_cnt);
	printk("\tbbt table            0x%p\n", zb_bbt);
	return 0;
}
/*------------------------------------------------------------------------------
  @brief   제로부팅 이후 처리할일
  @remark   
*///----------------------------------------------------------------------------
/* //JHYOON REMOVE
#ifdef CONFIG_FALINUX_NAND_BBT_ROOTFS_SURPORT
extern void zero_repack_rootfs(void);
#else
static void zero_repack_rootfs(void) { }
#endif
*/

static void zero_repack_rootfs(void) { }

static int nand_post_zeroboot( void )
{
	int  wr_bbt, page;
		                        
	// BBT 를 저장해야 한다면
	if ( zb_nand->need_bbt_page_write )
	{
		wr_bbt = 0;
		page   = ZB_NAND_BBT_PAGE;

		while( wr_bbt < BBT_ARRAY_CNT )
		{
			nand_write_page( page, zb_bbt + wr_bbt ); 
			page ++;
			wr_bbt += zb_nand->pagesize;
		}

		zb_nand->need_bbt_page_write = 0;	 
		printk(" write bbt table\n" );
	}
	
	zero_repack_rootfs();
	return 0;
}
/*------------------------------------------------------------------------------
     for NAND private ptr 
*///============================================================================


/*------------------------------------------------------------------------------
  @brief   초기화
  @remark   
*///----------------------------------------------------------------------------
int zb_storage_init( struct zblk_ops *zblk_ops )
{
	printk( "STORAGE %s NAND-READY\n", STORAGE_NAME );

	nand_base = ioremap( NAND_PHYS_BASE, NAND_PHYS_SIZE );
	dma_base  = ioremap( 0xB0600000, 0x1000 );
	printk( "io mapping  nand_base=%p   phys=%08x\n", nand_base, NAND_PHYS_BASE );
	
	if ( 0 != nand_detect() ) 
	{
		printk("Fail to Detect valid nand device\n");
		iounmap( nand_base );
		iounmap( dma_base  );
		nand_base = NULL;
		return -1;
	}

	zblk_ops->setup_first         = nand_setup_first       ;	// 준비 작업(처음 한번 호출된다.)
	zblk_ops->get_storage_offset  = nand_get_storage_offset;	// 저장소(난드플래시)의 시작 주소(바이트 단위)
	zblk_ops->page_write          = nand_write_page_4k     ;	// 4KiB 단위의 버퍼 쓰기
	zblk_ops->page_read           = nand_read_page_4k      ;	// 4KiB 단위의 버퍼 읽기
	zblk_ops->get_io_vaddr		  = nand_get_io_vaddr      ;	// nand_base 주소를 얻는 함수
	zblk_ops->setup_post_zeroboot = nand_post_zeroboot     ;	// 제로부트 이후에 할일


	zb_nand = (struct zb_priv_nand *)get_storage_priv_offset();
	zb_setup_private_info();          
	
  	page_min = zb_nand->zb_start_page; 
 	page_max = zb_nand->zb_start_page + zb_nand->zb_page_count;
	zb_bbt_init();

	printk( "NAND-STORAGE-OFFSET  0x%08lx (%ld-MB)\n", zb_nand->offset , zb_nand->offset>>20 );
	printk( "NAND-STORAGE-SIZE    0x%08x (%d-MB)\n"  , zb_nand->size   , zb_nand->size  >>20 );
	printk( "NAND-PAGE-OFFSET     %d\n"              , zb_nand->zb_start_page );
	printk( "NAND-PAGE-AREA       %d <= page <= %d\n", page_min, page_max );
    return 0;
}
/*------------------------------------------------------------------------------
  @brief   해제
  @remark  
*///----------------------------------------------------------------------------
void zb_storage_exit( void )
{
	if ( nand_base ) iounmap( nand_base );
	if ( dma_base  ) iounmap( dma_base  );
	
	printk( "STORAGE NAND-EXIT\n" );
}
