#define LOG_TAG "NXDeinterlacerManager"

#include <unistd.h>
#include <fcntl.h>
#include <utils/Log.h>
#include <gralloc_priv.h>
#include <ion/ion.h>

#include "NXDeinterlacerManager.h"

using namespace android;

#define DEINTERLACER_DEVICE_NODE_NAME   "/dev/deinterlacer"

NXDeinterlacerManager::NXDeinterlacerManager(int srcWidth, int srcHeight)
    : mSrcWidth(srcWidth),
      mSrcHeight(srcHeight)
{
		mRunCount	=	0;
    mHandle = -1;
    mIonHandle = -1;
}

NXDeinterlacerManager::~NXDeinterlacerManager(void)
{
    if (mHandle >= 0)
        close(mHandle);

    if (mIonHandle >= 0)
        close(mIonHandle);
}

bool NXDeinterlacerManager::qSrcBuf(int index, struct nxp_vid_buffer *buf)
{
    NXDeinterlacerManager::SrcBufferType entry;
    entry.index = index;
    entry.buf = buf;
    mSrcBufferQueue.queue(entry);
    ALOGV("qSrcBuf index %d, buf %p", index, buf);
    return true;
}

bool NXDeinterlacerManager::dqSrcBuf(int *pIndex, struct nxp_vid_buffer **pBuf)
{
    // psw0523 HACK
    //if (mRunCount >= 2) {
    if (mRunCount >= 1) {
        NXDeinterlacerManager::SrcBufferType entry = mSrcBufferQueue.dequeue();

        *pIndex = entry.index;
        *pBuf = entry.buf;
        // psw0523 HACK
        //mRunCount -= 2;
        mRunCount--;
        ALOGV("dqSrcBuf index %d, buf %p, mRunCount %d", entry.index, entry.buf, mRunCount);
        return true;
    }
    return false;
}

#if 0
bool NXDeinterlacerManager::qDstBuf(ANativeWindowBuffer *buf)
{
  	 ALOGV("qDstBuf %p", buf);
    mDstBufferQueue.queue(buf);
    return true;
}

bool NXDeinterlacerManager::dqDstBuf(ANativeWindowBuffer **pBuf)
{
    *pBuf = mDstBufferQueue.dequeue();
    ALOGV("dqDstBuf %p", *pBuf);
    return true;
}
#else
bool NXDeinterlacerManager::qDstBuf(struct nxp_vid_buffer *buf)
{
  	 ALOGV("qDstBuf %p", buf);
    mDstBufferQueue.queue(buf);
    return true;
}

bool NXDeinterlacerManager::dqDstBuf(struct nxp_vid_buffer **pBuf)
{
    *pBuf = mDstBufferQueue.dequeue();
    ALOGV("dqDstBuf %p", *pBuf);
    return true;
}
#endif

bool NXDeinterlacerManager::run(void)
{
    if (mSrcBufferQueue.size() >= 2) {
        if (mHandle < 0) {
            mHandle = open(DEINTERLACER_DEVICE_NODE_NAME, O_RDWR);
            if (mHandle < 0) {
              ALOGE("Fatal Error: can't open device node %s", DEINTERLACER_DEVICE_NODE_NAME);
                return false;
            }
        }

        if (mIonHandle < 0) {
             mIonHandle = ion_open();
             if (mIonHandle < 0) {
                ALOGE("Fatal Error: failed to ion_open()");
                 return false;
             }
        }

        // psw0523 HACK
#if 0
        int runCount = mSrcBufferQueue.size() * 2 - 2;
        for (int i = 0; i < runCount; i++) {
            makeFrameInfo(i/2);
            if (ioctl(mHandle, IOCTL_DEINTERLACE_SET_AND_RUN, &mFrameInfo) == -1) {
               	ALOGE("Critical Error: IOCTL_DEINTERLACE_SET_AND_RUN failed");
                return false;
            }
        }
        mRunCount += runCount;
#else
        makeFrameInfo(0);
        if (ioctl(mHandle, IOCTL_DEINTERLACE_SET_AND_RUN, &mFrameInfo) == -1) {
            ALOGE("Critical Error: IOCTL_DEINTERLACE_SET_AND_RUN failed");
            return false;
        }
        mRunCount++;
#endif
        //ALOGV("run count: %d", mRunCount);
        return true;
    }
    return false;
}

#if 0
void NXDeinterlacerManager::makeFrameInfo(int index)
{
    frame_data_info *pInfo = &mFrameInfo;

    // get src buffer
    NXDeinterlacerManager::SrcBufferType srcBuf0, srcBuf1;

    srcBuf0 = mSrcBufferQueue.getItem(index);
    srcBuf1 = mSrcBufferQueue.getItem(index + 1);

    struct nxp_vid_buffer *pSrcBuf0, *pSrcBuf1;
    pSrcBuf0 = srcBuf0.buf;
    pSrcBuf1 = srcBuf1.buf;

    ANativeWindowBuffer *pDstNativeWindowBuffer ;
    private_handle_t const *handle;

    frame_data *pSrcFrame0 = &pInfo->src_bufs[0];
    frame_data *pSrcFrame1 = &pInfo->src_bufs[1];
    frame_data *pSrcFrame2 = &pInfo->src_bufs[2];
    frame_data *pDstFrame  = &pInfo->dst_bufs[0];

    pInfo->command = ACT_DIRECT;
    pInfo->width = mSrcWidth;
    pInfo->height = mSrcHeight;
    pInfo->plane_mode = PLANE3;

    if (mCurrentField == NXDeinterlacerManager::FIELD_EVEN) {
        // EVEN - ODD - EVEN
        pDstNativeWindowBuffer = mDstBufferQueue.getItem(index);

        // EVEN
        pSrcFrame0->frame_num = 1;
        pSrcFrame0->plane_num = 3;
        pSrcFrame0->frame_type = FRAME_SRC;
        pSrcFrame0->frame_factor = 1;
        pSrcFrame0->plane3.src_stride[0] = YUV_YSTRIDE(mSrcWidth);
        pSrcFrame0->plane3.src_stride[1] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame0->plane3.src_stride[2] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame0->plane3.phys[0] = pSrcBuf0->phys[0];
        pSrcFrame0->plane3.phys[1] = pSrcBuf0->phys[1];
        pSrcFrame0->plane3.phys[2] = pSrcBuf0->phys[2];

        // ODD
        pSrcFrame1->frame_num = 0;
        pSrcFrame1->plane_num = 3;
        pSrcFrame1->frame_type = FRAME_SRC;
        pSrcFrame1->frame_factor = 1;
        pSrcFrame1->plane3.src_stride[0] = YUV_YSTRIDE(mSrcWidth);
        pSrcFrame1->plane3.src_stride[1] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame1->plane3.src_stride[2] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame1->plane3.phys[0] = pSrcBuf0->phys[0] + (pSrcBuf0->stride[0] * mSrcHeight);
        pSrcFrame1->plane3.phys[1] = pSrcBuf0->phys[1] + (pSrcBuf0->stride[1] * (mSrcHeight/2));
        pSrcFrame1->plane3.phys[2] = pSrcBuf0->phys[2] + (pSrcBuf0->stride[2] * (mSrcHeight/2));

        // EVEN
        pSrcFrame2->frame_num = 1;
        pSrcFrame2->plane_num = 3;
        pSrcFrame2->frame_type = FRAME_SRC;
        pSrcFrame2->frame_factor = 1;
        pSrcFrame2->plane3.src_stride[0] = YUV_YSTRIDE(mSrcWidth);
        pSrcFrame2->plane3.src_stride[1] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame2->plane3.src_stride[2] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame2->plane3.phys[0] = pSrcBuf1->phys[0];
        pSrcFrame2->plane3.phys[1] = pSrcBuf1->phys[1];
        pSrcFrame2->plane3.phys[2] = pSrcBuf1->phys[2];
    } else {

        // ODD - EVEN - ODD
        pDstNativeWindowBuffer = mDstBufferQueue.getItem(index + 1);

        // ODD
        pSrcFrame0->frame_num = 0;
        pSrcFrame0->plane_num = 3;
        pSrcFrame0->frame_type = FRAME_SRC;
        pSrcFrame0->frame_factor = 1;
        pSrcFrame0->plane3.src_stride[0] = YUV_YSTRIDE(mSrcWidth);
        pSrcFrame0->plane3.src_stride[1] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame0->plane3.src_stride[2] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame0->plane3.phys[0] = pSrcBuf0->phys[0] + (pSrcBuf0->stride[0] * mSrcHeight);
        pSrcFrame0->plane3.phys[1] = pSrcBuf0->phys[1] + (pSrcBuf0->stride[1] * (mSrcHeight/2));
        pSrcFrame0->plane3.phys[2] = pSrcBuf0->phys[2] + (pSrcBuf0->stride[2] * (mSrcHeight/2));

        // EVEN
        pSrcFrame1->frame_num = 1;
        pSrcFrame1->plane_num = 3;
        pSrcFrame1->frame_type = FRAME_SRC;
        pSrcFrame1->frame_factor = 1;
        pSrcFrame1->plane3.src_stride[0] = YUV_YSTRIDE(mSrcWidth);
        pSrcFrame1->plane3.src_stride[1] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame1->plane3.src_stride[2] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame1->plane3.phys[0] = pSrcBuf1->phys[0];
        pSrcFrame1->plane3.phys[1] = pSrcBuf1->phys[1];
        pSrcFrame1->plane3.phys[2] = pSrcBuf1->phys[2];

        // ODD
        pSrcFrame2->frame_num = 0;
        pSrcFrame2->plane_num = 3;
        pSrcFrame2->frame_type = FRAME_SRC;
        pSrcFrame2->frame_factor = 1;
        pSrcFrame2->plane3.src_stride[0] = YUV_YSTRIDE(mSrcWidth);
        pSrcFrame2->plane3.src_stride[1] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame2->plane3.src_stride[2] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame2->plane3.phys[0] = pSrcBuf1->phys[0] + (pSrcBuf1->stride[0] * mSrcHeight);
        pSrcFrame2->plane3.phys[1] = pSrcBuf1->phys[1] + (pSrcBuf1->stride[1] * (mSrcHeight/2));
        pSrcFrame2->plane3.phys[2] = pSrcBuf1->phys[2] + (pSrcBuf1->stride[2] * (mSrcHeight/2));
    }

    handle = reinterpret_cast<private_handle_t const *>(pDstNativeWindowBuffer->handle);
    // set dest
    pDstFrame->frame_num = 0;
    pDstFrame->plane_num = 3;
    pDstFrame->frame_type = FRAME_DST;
    pDstFrame->frame_factor = 256;
    pDstFrame->plane3.dst_stride[0] = handle->stride;
    pDstFrame->plane3.dst_stride[1] = handle->stride/2;
    pDstFrame->plane3.dst_stride[2] = handle->stride/2;
    pDstFrame->plane3.dst_stride[0] = handle->stride;
    pDstFrame->plane3.dst_stride[1] = handle->stride/2;
    pDstFrame->plane3.dst_stride[2] = handle->stride/2;
    ion_get_phys(mIonHandle, handle->share_fd, &pDstFrame->plane3.phys[0]);
    pDstFrame->plane3.phys[1] = pDstFrame->plane3.phys[0] + (handle->stride * YUV_VSTRIDE(handle->height));
    pDstFrame->plane3.phys[2] = pDstFrame->plane3.phys[1] + ((handle->stride/2) * YUV_VSTRIDE(handle->height/2));

    // psw0523 HACK
    //mCurrentField ^= 1;
}
#else
void NXDeinterlacerManager::makeFrameInfo(int index)
{
    frame_data_info *pInfo = &mFrameInfo;

    // get src buffer
    NXDeinterlacerManager::SrcBufferType srcBuf0, srcBuf1;

    srcBuf0 = mSrcBufferQueue.getItem(index);
    srcBuf1 = mSrcBufferQueue.getItem(index + 1);

    struct nxp_vid_buffer *pSrcBuf0, *pSrcBuf1;
    pSrcBuf0 = srcBuf0.buf;
    pSrcBuf1 = srcBuf1.buf;

    struct nxp_vid_buffer *pDstBuf;

    frame_data *pSrcFrame0 = &pInfo->src_bufs[0];
    frame_data *pSrcFrame1 = &pInfo->src_bufs[1];
    frame_data *pSrcFrame2 = &pInfo->src_bufs[2];
    frame_data *pDstFrame  = &pInfo->dst_bufs[0];

    pInfo->command = ACT_DIRECT;
    pInfo->width = mSrcWidth;
    pInfo->height = mSrcHeight;
    pInfo->plane_mode = PLANE3;

    if (mCurrentField == NXDeinterlacerManager::FIELD_EVEN) {
        // EVEN - ODD - EVEN
        pDstBuf = mDstBufferQueue.getItem(index);

        // EVEN
        pSrcFrame0->frame_num = 1;
        pSrcFrame0->plane_num = 3;
        pSrcFrame0->frame_type = FRAME_SRC;
        pSrcFrame0->frame_factor = 1;
        pSrcFrame0->plane3.src_stride[0] = YUV_YSTRIDE(mSrcWidth);
        pSrcFrame0->plane3.src_stride[1] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame0->plane3.src_stride[2] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame0->plane3.phys[0] = pSrcBuf0->phys[0];
        pSrcFrame0->plane3.phys[1] = pSrcBuf0->phys[1];
        pSrcFrame0->plane3.phys[2] = pSrcBuf0->phys[2];

        // ODD
        pSrcFrame1->frame_num = 0;
        pSrcFrame1->plane_num = 3;
        pSrcFrame1->frame_type = FRAME_SRC;
        pSrcFrame1->frame_factor = 1;
        pSrcFrame1->plane3.src_stride[0] = YUV_YSTRIDE(mSrcWidth);
        pSrcFrame1->plane3.src_stride[1] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame1->plane3.src_stride[2] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame1->plane3.phys[0] = pSrcBuf0->phys[0] + (pSrcBuf0->stride[0] * mSrcHeight);
        pSrcFrame1->plane3.phys[1] = pSrcBuf0->phys[1] + (pSrcBuf0->stride[1] * (mSrcHeight/2));
        pSrcFrame1->plane3.phys[2] = pSrcBuf0->phys[2] + (pSrcBuf0->stride[2] * (mSrcHeight/2));

        // EVEN
        pSrcFrame2->frame_num = 1;
        pSrcFrame2->plane_num = 3;
        pSrcFrame2->frame_type = FRAME_SRC;
        pSrcFrame2->frame_factor = 1;
        pSrcFrame2->plane3.src_stride[0] = YUV_YSTRIDE(mSrcWidth);
        pSrcFrame2->plane3.src_stride[1] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame2->plane3.src_stride[2] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame2->plane3.phys[0] = pSrcBuf1->phys[0];
        pSrcFrame2->plane3.phys[1] = pSrcBuf1->phys[1];
        pSrcFrame2->plane3.phys[2] = pSrcBuf1->phys[2];
    } else {

        // ODD - EVEN - ODD
        pDstBuf = mDstBufferQueue.getItem(index + 1);

        // ODD
        pSrcFrame0->frame_num = 0;
        pSrcFrame0->plane_num = 3;
        pSrcFrame0->frame_type = FRAME_SRC;
        pSrcFrame0->frame_factor = 1;
        pSrcFrame0->plane3.src_stride[0] = YUV_YSTRIDE(mSrcWidth);
        pSrcFrame0->plane3.src_stride[1] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame0->plane3.src_stride[2] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame0->plane3.phys[0] = pSrcBuf0->phys[0] + (pSrcBuf0->stride[0] * mSrcHeight);
        pSrcFrame0->plane3.phys[1] = pSrcBuf0->phys[1] + (pSrcBuf0->stride[1] * (mSrcHeight/2));
        pSrcFrame0->plane3.phys[2] = pSrcBuf0->phys[2] + (pSrcBuf0->stride[2] * (mSrcHeight/2));

        // EVEN
        pSrcFrame1->frame_num = 1;
        pSrcFrame1->plane_num = 3;
        pSrcFrame1->frame_type = FRAME_SRC;
        pSrcFrame1->frame_factor = 1;
        pSrcFrame1->plane3.src_stride[0] = YUV_YSTRIDE(mSrcWidth);
        pSrcFrame1->plane3.src_stride[1] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame1->plane3.src_stride[2] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame1->plane3.phys[0] = pSrcBuf1->phys[0];
        pSrcFrame1->plane3.phys[1] = pSrcBuf1->phys[1];
        pSrcFrame1->plane3.phys[2] = pSrcBuf1->phys[2];

        // ODD
        pSrcFrame2->frame_num = 0;
        pSrcFrame2->plane_num = 3;
        pSrcFrame2->frame_type = FRAME_SRC;
        pSrcFrame2->frame_factor = 1;
        pSrcFrame2->plane3.src_stride[0] = YUV_YSTRIDE(mSrcWidth);
        pSrcFrame2->plane3.src_stride[1] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame2->plane3.src_stride[2] = YUV_STRIDE(mSrcWidth/2);
        pSrcFrame2->plane3.phys[0] = pSrcBuf1->phys[0] + (pSrcBuf1->stride[0] * mSrcHeight);
        pSrcFrame2->plane3.phys[1] = pSrcBuf1->phys[1] + (pSrcBuf1->stride[1] * (mSrcHeight/2));
        pSrcFrame2->plane3.phys[2] = pSrcBuf1->phys[2] + (pSrcBuf1->stride[2] * (mSrcHeight/2));
    }

    // set dest
    pDstFrame->frame_num = 0;
    pDstFrame->plane_num = 3;
    pDstFrame->frame_type = FRAME_DST;
    pDstFrame->frame_factor = 256;
    pDstFrame->plane3.dst_stride[0] = 1024;
    pDstFrame->plane3.dst_stride[1] = 512;
    pDstFrame->plane3.dst_stride[2] = 512;
    pDstFrame->plane3.phys[0] = pDstBuf->phys[0];
    pDstFrame->plane3.phys[1] = pDstBuf->phys[1];
    pDstFrame->plane3.phys[2] = pDstBuf->phys[2];

    // psw0523 HACK
    //mCurrentField ^= 1;
}
#endif
